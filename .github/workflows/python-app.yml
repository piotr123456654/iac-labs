# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
    defaults:
      run:
        working-directory: ./example-app

    steps:
    - uses: actions/checkout@v3
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/work/iac-labs/cached/example-app/.venv
        key: ${{ runner.os }}-venv
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        
  lint:

    matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
    needs: build
    defaults:
      run:
        working-directory: ./example-app

    concurrency:
      group: format-tests

    steps:
    - uses: actions/checkout@v3
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/work/iac-labs/cached/example-app/.venv
        key: ${{ runner.os }}-venv
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
  formatter:

    matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
    needs: build
    defaults:
      run:
        working-directory: ./example-app
    
    concurrency:
      group: format-tests

    steps:
    - uses: actions/checkout@v3
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/work/iac-labs/cached/example-app/.venv
        key: ${{ runner.os }}-venv
    - name: Test with pytest
      run: |
        pip install pytest
        pytest
        
  security:

    matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
    needs: build
    outputs:
      packages: ${{ steps.step4.outputs.packages }}
    defaults:
      run:
        working-directory: ./example-app
    
    concurrency:
      group: format-tests

    steps:
    - uses: actions/checkout@v3
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/work/iac-labs/cached/example-app/.venv
        key: ${{ runner.os }}-venv
    - name: Poetry Install
      uses: snok/install-poetry@v1
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        poetry install
    - name: Test with wget
      run: |
        nohup "$poetry run python run.py$" & timeout 3s bash -c "wget http://localhost"
      
  unittests:

    matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
    defaults:
      run:
        working-directory: ./example-app
    
    needs: [build, lint, security, formatter]
    steps:
    - uses: actions/checkout@v3
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/work/iac-labs/cached/example-app/.venv
        key: ${{ runner.os }}-venv
    - name: Unit tests
      run: |
        poetry tests/conftest.py
        poetry tests/test_config.py
